
def main():
    with open("../input/day2.txt", "r") as f:
        lines = [l.strip() for l in f.readlines()]

        mapped = [build_map(x) for x in lines]
        print(find_alignment(mapped))


def build_map(s):
    """
    Creates a map of all strings with a length one less than the given string mapped to the the position
    at which a character was removed to create that string.

    eg. build_map("asdf") -> {
        "sdf": 0,
        "adf": 1,
        "asf": 2,
        "asd": 3
    }
    :param s: The string to build a map for
    :return: The map for the given string
    """
    m = {}
    for i in range(len(s)):
        remaining = s[:i] + s[i+1:]
        m[remaining] = i
    return m


def find_alignment(maps):
    """
    Performs the root functionality for the exercise, not general purpose.
    Attempts to find any two strings that differ by exactly one character in the same position.  When a suitable
    match is found, immediately returns with a string containing all matched characters.

    :param maps: A list of maps for the strings being compared, as generated by build_map()
    :return: The matched substring of the first-found matching pair, or None if no such match was found
    """
    master = {}

    # Iterate through the string maps for all strings
    for m in maps:

        # Iterate through all match-position pairs that belong to this string map
        for match, pos in m.items():

            # If the match exists in the master dict, check whether the position exists for the match
            # as well.  If it does, simply return out of the function with the matched substring.
            # Otherwise, add the position to the master's record for the matched substring.
            if match in master:
                if pos in master[match]:
                    return match
                else:
                    master[match].add(pos)

            # Otherwise, if the match does not exist in the master dict, add it.
            else:
                master[match] = {pos}

    return None


main()
