
def main():
    with open("../input/day2.txt", "r") as f:
        lines = [l.strip() for l in f.readlines()]

    line_maps = [map_dups(x) for x in lines]
    master_dup_count = aggregate_dups(line_maps)

    print(calc_checksum(master_dup_count))


def map_dups(string: str) -> dict:
    """
    Creates a dictionary for the given string that maps each character present in the string
    to a value representing the number of times that character occurs in the string.

    eg. map_dups("racecar") -> {
        "r": 2,
        "a"; 2,
        "c"; 2,
        "e"; 1
    }
    :param string: The string to build a character map for
    :return: The character map for the given string
    """
    dups = {}
    for char in string:
        if char in dups:
            dups[char] += 1
        else:
            dups[char] = 1
    return dups


def aggregate_dups(dup_list: list) -> dict:
    """
    Totals up the number of strings represented by char maps in the given list that have exactly X occurrences of
    a particular character, and returning a dictionary that maps each X that occurs to this total count.

    eg.
    [
        {
            "a": 2,
            "b": 1,
        },
        {
            "c": 2,
            "d": 3,
            "e": 2
        }
    ] ->
    {
        1: 1,
        2: 2,
        3: 1
    }

    :param dup_list: A list of character maps for strings as generated by map_dups()
    :return: A dictionary that maps counts of duplicate characters to the number of strings in the given list
    that contain at least one instance of that many duplicate characters
    """
    aggregate = {}
    for dup in dup_list:
        for val in set(dup.values()):
            if val in aggregate:
                aggregate[val] += 1
            else:
                aggregate[val] = 1
    return aggregate


def calc_checksum(dup_counts: dict) -> int:
    """
    Performs the root functionality for the exercise, not general purpose.
    Calculates the 'checksum' for the input data based on the given aggregate duplicate counts as
    generated by aggregate_dups()

    :param dup_counts: The dictionary mapping the counts of duplicates
    :return: The checksum for the data represented in the given aggregate duplicate counts
    """
    twos = dup_counts[2] if 2 in dup_counts else 0
    threes = dup_counts[3] if 3 in dup_counts else 0
    return twos * threes


main()



